解决Django migrate No changes detected 不能创建表

起因
修改了表结构以后执行python3 manage.py migrate 报错:

django.db.utils.OperationalError: (1091, "Can't DROP 'email'; check that column/key exists")
1
所以进数据库把对应的表删除了,想着重新生成这张表. 
删除表以后执行:

python3 manage.py makemigrations
python3 manage.py migrate
1
2
还是不能生成表,提示:No changes detected

处理过程
首先删除了app对应目录下的数据库对应的文件和缓存文件:

$ rm -rf migrations/ __pycache__/
1
重新执行:

$ python3 manage.py makemigrations
No changes detected
$~/code/django/blogproject$ python3 manage.py makemigrations comments
Migrations for 'comments':
  comments/migrations/0001_initial.py
    - Create model Comment
$~/code/django/blogproject$ python3 manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, blog, comments, contenttypes, sessions, users
Running migrations:
  No migrations to apply.

进入数据库发现仍然没有生成表.

然后发现有一张django_migrations表,里面记录这有关创建表的记录,删除对应的数据表:

delete from django_migrations where app='yourappname';
1
重新执行生成数据库命令:

$ python3 manage.py makemigrations comments
No changes detected in app 'comments'
$~/code/django/blogproject$ python3 manage.py  migrate comments
Operations to perform:
  Apply all migrations: comments
Running migrations:
  Applying comments.0001_initial... OK

数据表顺利生成.

结论
在执行 
python3 manage.py makemigrations 
python3 manage.py migrate 
操作的时候,不仅会创建0001_initial.py对应的模型脚本,还会创建一个数据库记录创建的模型.如果想重新生成数据库,需要两个地方都做删除.


def upload_file(request):  
    if request.method == "POST":    # 请求方法为POST时，进行处理  
        myFile =request.FILES.get("myfile", None)    # 获取上传的文件，如果没有文件，则默认为None  
        if not myFile:  
            returnHttpResponse("no files for upload!")  
        destination = open(os.path.join("E:\\upload",myFile.name),'wb+')    # 打开特定的文件进行二进制的写操作  
        for chunk in myFile.chunks():      # 分块写入文件  
            destination.write(chunk)  
        destination.close()  
        returnHttpResponse("upload over!")  


这里需要对上面视图函数中的代码进行详细的解释一番：

首先，对于上传的文件，虽然是通过POST的方式上传的，但是不能通过request.POST["myfile"]或者request.POST.get("myfile", None)，这两种方式来访问，这里需要使用另外一种方式，就是：

           request.FILES["myfile"]或者request.FILES.get("myfile", None)

因为上传的文件是保存在FILES这个字典中的，可以在if request.method =="POST"之前加上一句assert False，再运行浏览器，就可以看到结果。

接下来，需要判断用户是不是真的上传了文件，如果用户仅仅只是点了 一下upload按键，那么就提示他没有上传文件。


下面是最重要的部分，现在已经得到了文件了，但是文件在内存中，没有写到硬盘里面去，接下里需要完成的就是把文件写入到硬盘，那到底该怎么写，我看了很多人的博客，写的云里雾里的，都没有说清楚，把我搞糊涂了。

其实上传文件，就是把硬盘里面某个文件的数据，写入到服务器指定的文件中，在最底层不管是txt文件还是exe文件等，全都是二进制的数据，这里所要做的只是将已经上传了的文件的数据，以二进制的方式写入到服务器指定的文件中，这个文件可以随意命名。

比如可以将上传的123.exe文件，保存为abc.txt，但是这毫无意义，对于上传的123.exe，在服务器上也应该是123.exe。其实在这里所说的abc.txt和123.exe的内容是完全一样的，只需要将abc.txt的文件后缀改为exe就行了。

 

在进行进一步的代码解释之前，需要先讲几个关于上传文件的方法和属性：

    myFile.read()：从文件中读取整个上传的数据，这个方法只适合小文件；

    myFile.chunks()：按块返回文件，通过在for循环中进行迭代，可以将大文件按块写入到服务器中；

   myFile.multiple_chunks()：这个方法根据myFile的大小，返回True或者False，当myFile文件大于2.5M(默认为2.5M，可以调整)时，该方法返回True，否则返回False，因此可以根据该方法来选择选用read方法读取还是采用chunks方法：

      if myFile.multiple_chunks() == False:

         # 使用myFile.read()

      else:

         # 使用myFile.chunks()

   myFile.name：这是一个属性，不是方法，该属性得到上传的文件名，包括后缀，如123.exe；

   myFile.size：这也是一个属性，该属性得到上传文件的大小。

 

接下来的一行代码是：

   destination = open(os.path.join("E:\\upload",myFile.name), 'wb+')

这一行代码需要用到os模块，import os。对于os.path.join("E:\\upload", myFile.name)，如果上传的文件为123.exe，那么将得到E:\\upload\\123.exe这个路径，以写二进制的方式打开这个文件。接下来是分块写入数据：

   for chunk in myFile.chunks():      # 分块写入文件

      destination.write(chunk)

数据写完之后关闭文件就可以了，destination.close()。
